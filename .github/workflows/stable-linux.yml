name: stable-linux

on:
  workflow_dispatch:
    inputs:
      new_release:
        type: boolean
        description: Force new Release
      force_version:
        type: boolean
        description: Force update version
      vscodium_latest:
        type: boolean
        description: Use latest VSCodium
  repository_dispatch:
    types: [stable]

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
  APP_NAME: MrCode
  ASSETS_REPOSITORY: ${{ github.repository }}
  BINARY_NAME: codium
  DISABLE_UPDATE: 'yes'
  GH_REPO_PATH: ${{ github.repository_owner }}/${{ github.repository }}
  ORG_NAME: ${{ github.repository_owner }}
  OS_NAME: linux
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/MrCode-versions
  VSCODE_QUALITY: stable

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      MS_COMMIT: ${{ env.MS_COMMIT }}
      MS_TAG: ${{ env.MS_TAG }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}
      VSCODIUM_COMMIT: ${{ env.VSCODIUM_COMMIT }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Clone VSCodium repo
        env:
          VSCODIUM_LATEST: ${{ github.event.inputs.vscodium_latest }}
        run: ./get_repo.sh

      - name: Check existing VSCodium tags/releases
        env:
          CHECK_ALL: 'yes'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_RELEASE: ${{ github.event.inputs.new_release }}
        working-directory: ./vscodium
        run: ./check_tags.sh

  compile:
    needs:
      - check
    runs-on: ubuntu-20.04
    env:
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      VSCODE_ARCH: 'x64'
      VSCODIUM_COMMIT: ${{ needs.check.outputs.VSCODIUM_COMMIT }}
    outputs:
      BUILD_SOURCEVERSION: ${{ env.BUILD_SOURCEVERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.2'
        if: env.SHOULD_BUILD == 'yes'

      - name: Install Yarn
        run: npm install -g yarn
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.SHOULD_BUILD == 'yes'

      - name: Clone VSCodium repo
        run: ./get_repo.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Prepare VSCodium
        run: ./prepare.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Build
        env:
          SHOULD_BUILD_REH: 'no'
          SHOULD_BUILD_REH_WEB: 'no'
        working-directory: ./vscodium
        run: ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Compress vscode artifact
        working-directory: ./vscodium
        run: |
          find vscode -type f -not -path "*/node_modules/*" -not -path "vscode/.build/node/*" -not -path "vscode/.git/*" > vscode.txt
          echo "vscode/.build/extensions/node_modules" >> vscode.txt
          echo "vscode/.git" >> vscode.txt
          tar -czf vscode.tar.gz -T vscode.txt
        if: env.SHOULD_BUILD == 'yes'

      - name: Upload vscode artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode
          path: ./vscodium/vscode.tar.gz
          retention-days: 30
        if: env.SHOULD_BUILD == 'yes'

  build:
    needs:
      - check
      - compile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - slug: X64
          vscode_arch: x64
          npm_arch: x64
          image: vscodium/vscodium-linux-build-agent:focal-x64
        - slug: ARM64
          vscode_arch: arm64
          npm_arch: arm64
          image: vscodium/vscodium-linux-build-agent:focal-arm64
        - slug: ARM32
          vscode_arch: armhf
          npm_arch: arm
          image: vscodium/vscodium-linux-build-agent:focal-armhf
        - slug: RISCV64
          vscode_arch: riscv64
          npm_arch: riscv64
          image: vscodium/vscodium-linux-build-agent:focal-riscv64
        - slug: LOONG64
          vscode_arch: loong64
          npm_arch: loong64
          image: vscodium/vscodium-linux-build-agent:beige-loong64
        - slug: PPC64
          vscode_arch: ppc64le
          npm_arch: ppc64
          image: vscodium/vscodium-linux-build-agent:focal-ppc64le
    container:
      image: ${{ matrix.image }}
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_LINUX_APP_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      VSCODIUM_COMMIT: ${{ needs.check.outputs.VSCODIUM_COMMIT }}
    outputs:
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Clone VSCodium repo
        run: ./get_repo.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          CHECK_REH: 'no'
          DISABLE_APPIMAGE: ${{ vars.DISABLE_STABLE_APPIMAGE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./vscodium
        run: ./check_tags.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Install GH
        working-directory: ./vscodium
        run: ./install_gh.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Prepare VSCodium
        run: ./prepare.sh -r
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
          path: vscodium/
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        working-directory: ./vscodium
        run: ./build/linux/package_bin.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Prepare assets
        env:
          SHOULD_BUILD_REH: 'no'
          SHOULD_BUILD_REH_WEB: 'no'
        working-directory: ./vscodium
        run: ./prepare_assets.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        working-directory: ./vscodium
        run: ./release.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      - name: Update versions repo
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_version }}
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        working-directory: ./vscodium
        run: ./update_version.sh
        if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

      # - name: Upload assets
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: bin-${{ matrix.vscode_arch }}
      #     path: vscodium/assets/
      #     retention-days: 3
      #   if: env.DISABLED != 'yes' && env.SHOULD_BUILD == 'yes'

  reh_linux:
    needs:
      - check
      - compile
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - slug: X64
          vscode_arch: x64
          npm_arch: x64
        - slug: ARM64
          vscode_arch: arm64
          npm_arch: arm64
        - slug: ARM32
          vscode_arch: armhf
          npm_arch: arm
        - slug: PPC64
          vscode_arch: ppc64le
          npm_arch: ppc64
        - slug: RISCV64
          vscode_arch: riscv64
          npm_arch: riscv64
        - slug: LOONG64
          vscode_arch: loong64
          npm_arch: loong64
        - slug: S390X
          vscode_arch: s390x
          npm_arch: s390x
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_LINUX_REH_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      VSCODIUM_COMMIT: ${{ needs.check.outputs.VSCODIUM_COMMIT }}
    if: needs.check.outputs.SHOULD_BUILD == 'yes'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.DISABLED != 'yes'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
        if: env.DISABLED != 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.2'
        if: env.DISABLED != 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: env.DISABLED != 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.DISABLED != 'yes'

      - name: Clone VSCodium repo
        run: ./get_repo.sh
        if: env.DISABLED != 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ONLY_REH: 'yes'
        working-directory: ./vscodium
        run: ./check_tags.sh
        if: env.DISABLED != 'yes'

      - name: Install GH
        working-directory: ./vscodium
        run: ./install_gh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Prepare VSCodium
        run: ./prepare.sh -r
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
          path: vscodium/
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        working-directory: ./vscodium
        run: ./build/linux/package_reh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        working-directory: ./vscodium
        run: ./release.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

  reh_alpine:
    needs:
      - check
      - compile
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - slug: X64
          vscode_arch: x64
          npm_arch: x64
        - slug: ARM64
          vscode_arch: arm64
          npm_arch: arm64
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      DISABLED: ${{ vars[format('DISABLE_STABLE_ALPINE_REH_{0}', matrix.slug)] }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      OS_NAME: alpine
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ needs.check.outputs.SHOULD_BUILD }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      VSCODIUM_COMMIT: ${{ needs.check.outputs.VSCODIUM_COMMIT }}
    if: needs.check.outputs.SHOULD_BUILD == 'yes'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.DISABLED != 'yes'

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64
        if: env.DISABLED != 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.DISABLED != 'yes'

      - name: Clone VSCodium repo
        run: ./get_repo.sh
        if: env.DISABLED != 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ONLY_REH: 'yes'
        working-directory: ./vscodium
        run: ./check_tags.sh
        if: env.DISABLED != 'yes'

      - name: Install GH
        working-directory: ./vscodium
        run: ./install_gh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Prepare VSCodium
        run: ./prepare.sh -r
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
          path: vscodium/
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.npm_arch }}
        working-directory: ./vscodium
        run: ./build/alpine/package_reh.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        working-directory: ./vscodium
        run: ./release.sh
        if: env.DISABLED != 'yes' && (env.SHOULD_BUILD_REH != 'no' || env.SHOULD_BUILD_REH_WEB != 'no')

  # aur:
  #   needs:
  #     - build
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       - package_name: mrcode-bin
  #         package_type: stable
  #       - package_name: mrcode
  #         package_type: stable
  #       - package_name: mrcode-git
  #         package_type: rolling

  #   steps:
  #     - name: Publish ${{ matrix.package_name }}
  #       uses: zokugun/github-actions-aur-releaser@v1
  #       with:
  #         package_name: ${{ matrix.package_name }}
  #         package_type: ${{ matrix.package_type }}
  #         aur_private_key: ${{ secrets.AUR_PRIVATE_KEY }}
  #         aur_username: ${{ secrets.AUR_USERNAME }}
  #         aur_email: ${{ secrets.AUR_EMAIL }}
